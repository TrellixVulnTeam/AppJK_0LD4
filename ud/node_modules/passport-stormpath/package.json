{
  "name": "passport-stormpath",
  "version": "0.2.4",
  "description": "Official Stormpath Passport Strategy",
  "main": "lib/index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha",
    "coverage": "node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha"
  },
  "keywords": [
    "stormpath",
    "passport"
  ],
  "homepage": "https://github.com/stormpath/passport-stormpath",
  "repository": {
    "type": "git",
    "url": "git://github.com/stormpath/passport-stormpath.git"
  },
  "author": {
    "name": "Stormpath, Inc.",
    "email": "support@stormpath.com",
    "url": "http://www.stormpath.com"
  },
  "license": "Apache-2.0",
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "grunt-mocha-test": "^0.10.0",
    "chai": "^1.9.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-jshint": "^0.10.0",
    "jshint-stylish": "^0.1.5",
    "istanbul": "^0.2.7",
    "mocha": "^1.18.2",
    "sinon": "^1.9.1",
    "proxyquire": "^0.6.0"
  },
  "dependencies": {
    "stormpath": "^0.6.0",
    "passport": "^0.2.0"
  },
  "readme": "# passport-stormpath\n\n[![NPM Version](https://img.shields.io/npm/v/passport-stormpath.svg?style=flat)](https://npmjs.org/package/passport-stormpath)\n[![NPM Downloads](http://img.shields.io/npm/dm/passport-stormpath.svg?style=flat)](https://npmjs.org/package/passport-stormpath)\n[![Build Status](https://img.shields.io/travis/stormpath/passport-stormpath.svg?style=flat)](https://travis-ci.org/stormpath/passport-stormpath)\n\n*A passport strategy for Stormpath, the simple user management API.*\n\n[Stormpath](https://stormpath.com/) extends Passport.js, adding a full set of user features:\n\n- Create, register and authenticate users.\n- Store custom user data with each account.\n- Create and assign permissions (groups, roles, etc.).\n- Handle complex authentication and authorization patterns, like multi-tenancy.\n- Log users in via social login with Facebook and Google OAuth.\n- Cache user information for quick access.\n- Secure all your passwords.\n- Automate all your password reset and account verification workflows.\n\n**NOTE**: If you're building an Express.js web application, you might want to\nuse our [express-stormpath](https://docs.stormpath.com/nodejs/express/index.html)\nlibrary instead -- it provides a simpler integration experience.\n\n\n## Documentation\n\nAll of this library's documentation can be found here:\nhttps://docs.stormpath.com/nodejs/passport/\n\nIf you'd like to hop right in and get started immediately, please take a look at\nthe [Quickstart Guide](https://docs.stormpath.com/nodejs/passport/quickstart.html).\n(*It's ridiculously easy to get started with.*)\n\n\n## Links\n\nBelow are some resources you might find useful!\n\n- [passport-stormpath documentation](https://docs.stormpath.com/nodejs/passport/)\n- [15-Minute Tutorial: Build a Webapp With Node.js, Express, Passport and Stormpath](https://stormpath.com/blog/build-app-nodejs-express-passport-stormpath/)\n- [stormpath-passport-express Sample App repo](https://github.com/stormpath/stormpath-passport-express-sample)\n- [Stormpath Node.js library](https://github.com/stormpath/stormpath-sdk-node)\n- [Stormpath website](https://stormpath.com/)\n\n\n## Installation\n\nTo get started, you need to install this package via\n[npm](https://www.npmjs.org/package/passport-stormpath):\n\n```console\n$ npm install passport-stormpath\n```\n\n\n## Usage\n\nTo use this module, you first need to export some environment variables -- these\nwill be used by the `passport-stormpath` library to connect to the Stormpath API\nservice:\n\n```console\n$ export STORMPATH_API_KEY_ID=xxx\n$ export STORMPATH_API_KEY_SECRET=xxx\n$ export STORMPATH_APP_HREF=xxx\n```\n\n**NOTE**: These variables can be found in your\n[Stormpath Admin Console](https://api.stormpath.com/ui/dashboard).\n\nOnce you've set the environment variables above, you can then initialize the\n`passport-stormpath` strategy like so:\n\n```javascript\nvar passport = require('passport');\nvar StormpathStrategy = require('passport-stormpath');\nvar strategy = new StormpathStrategy();\n\npassport.use(strategy);\npassport.serializeUser(strategy.serializeUser);\npassport.deserializeUser(strategy.deserializeUser);\n```\n\n\n## Options\n\nThere are several options you can define when you are creating the strategy,\neach is listed in this section.\n\n#### Api Keys\n\nIf you'd like to explicitly define your Stormpath API keys and application href\nsettings, you can do so when creating the strategy object:\n\n```javascript\nvar strategy = new StormpathStrategy({\n  apiKeyId:     'STORMPATH_API_KEY_ID',\n  apiKeySecret: 'STORMPATH_API_KEY_SECRET',\n  appHref:      'STORMPATH_APP_HREF',\n});\n```\n\n#### Account Store\n\nIf you wish to authenticate against a particular directory, you can configure\nthis for all authentication attempts when constructing the strategy.\n\n```javascript\nvar strategy = new StormpathStrategy({\n  accountStore: {\n    href: 'http://api.stormpath.com/v1/directorys/your-directory'\n  }\n});\n```\n\nIf you need to dynamically supply the account store, you can pass it\non a per-call basis by manually invoking passport.\n\n```javascript\n// Authenticate a user.\nrouter.post('/login',\n  passport.authenticate('stormpath',\n    {\n      successRedirect: '/dashboard',\n      failureRedirect: '/login',\n      failureFlash: 'Invalid email or password.',\n      accountStore: {\n        href: 'http://api.stormpath.com/v1/directorys/your-directory'\n      }\n    }\n  )\n);\n```\n\n\n#### Expansions\n\nAccount resources (*e.g. Custom Data, Groups*) can be automatically expanded\nduring the authentication process.  Declare which resources you would like to\nexpand by providing a comma separated list as the `expansions` option:\n\n```javascript\nvar strategy = new StormpathStrategy({\n  expansions: 'groups,customData'\n});\n```\n\n\n#### Stormpath Client\n\nYou can also provide your own Stormpath client instance by constructing it\nmanually and then passing it and an application reference to the strategy\nconstructor:\n\n```javascript\nvar stormpath = require('stormpath');\n\nvar spClient, spApp, strategy;\n\nspClient = new stormpath.Client({\n  apiKey: new stormpath.ApiKey(\n      process.env['STORMPATH_API_KEY_ID'],\n      process.env['STORMPATH_API_KEY_SECRET']\n  )\n});\n\nspClient.getApplication(process.env['STORMPATH_APP_HREF'], function(err, app) {\n  if (err) {\n    throw err;\n  }\n  spApp = app;\n  strategy = new StormpathStrategy({\n    spApp: spApp,\n    spClient: spClient\n  });\n  passport.use(strategy);\n});\n```\n\n\n## Build Documentation\n\nAll project documentation is written using [Sphinx](http://sphinx-doc.org/).  To\nbuild the documentation, you'll need to have Python installed and working.\n\nTo install Sphinx and all other dependencies, run:\n\n```console\n$ pip install -r requirements.txt\n```\n\nThis will install all the Python packages necessary to build the docs.\n\nOnce you have Sphinx installed, go into the `docs` directory to build the\ndocumentation:\n\n```console\n$ cd docs\n$ make html\n```\n\nWhen this process is finished, you'll see that all project documentation has\nbeen built into HTML available at `docs/_build/html`.\n\n\n## Contributing\n\nYou can make your own contributions by forking the `develop` branch, making\nyour changes, and issuing pull-requests on the `develop` branch.\n\nWe regularly maintain this repository, and are quick to review pull requests\nand accept changes!\n\nWe <333 contributions!\n\n\n## Copyright\n\nCopyright &copy; 2014 Stormpath, Inc. and contributors.\n\nThis project is open-source via the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stormpath/passport-stormpath/issues"
  },
  "_id": "passport-stormpath@0.2.4",
  "_shasum": "7afa94ce66da7fe7e9fe3b4b723a57241f01d3c4",
  "_from": "passport-stormpath@",
  "_resolved": "https://registry.npmjs.org/passport-stormpath/-/passport-stormpath-0.2.4.tgz"
}
